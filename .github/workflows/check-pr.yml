# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Check pull request

on: [ pull_request ]

env:
  GRAALVM_VERSION: '21.0.0.2'
  JAVA_VERSION: 'java8'

jobs:
  code-control:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up GraalVM
        uses: DeLaGuardo/setup-graalvm@4.0
        with:
          graalvm: ${{ env.GRAALVM_VERSION }}
          java: ${{ env.JAVA_VERSION }}
      - name: Check Java version
        run: java -version
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Set up Gradle cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Linter
        run: ./gradlew ktlinCheck
      - name: Code analysis
        run: ./gradlew detekt
  jvm-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up GraalVM
        uses: DeLaGuardo/setup-graalvm@4.0
        with:
          graalvm: ${{ env.GRAALVM_VERSION }}
          java: ${{ env.JAVA_VERSION }}
      - name: Check java version
        run: java -version
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Set up Gradle cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build
        run: ./gradlew clean build -x test -x integTest -x apiTest
      - name: Unit tests
        run: ./gradlew test
      - name: Integration tests
        run: ./gradlew integTest
      - name: API tests
        run: ./gradlew apiTest
      - name: Generate test coverage report
        run: ./gradlew jacocoTestReport
      - name: Verify test coverage minimum limit
        run: ./gradlew jacocoTestCoverageVerification
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: build/reports/jacoco/report.xml
          fail_ci_if_error: false
  native-image-test:
    runs-on: ubuntu-latest
    needs: [ code-control, jvm-test ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up GraalVM
        uses: DeLaGuardo/setup-graalvm@4.0
        with:
          graalvm: ${{ env.GRAALVM_VERSION }}
          java: ${{ env.JAVA_VERSION }}
      - name: Check Java version
        run: java -version
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Set up Gradle cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build native image
        run: ./gradlew clean build -x test -x integTest -x apiTest nativeImage
      - name: Native image API tests
        run: ./gradlew apiTestNativeImage
